/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package invoice.ui;

import entity.invoice.Invoice;
import entity.Payment;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import ui.AppTheme;

/**
 *
 * @author PersianDevStudio
 */
public class PaymentUISimple extends javax.swing.JPanel {

    private Payment payment = new Payment();

    private int type;

    private Invoice invoice;

    public PaymentUISimple(Invoice invoice, Payment payment) {
        this.payment = payment;
        this.invoice = invoice;
        this.type = payment.getObjectType();
        initComponents();
        setup(false);
        inputFieldValue.setText(payment.getDeptor().add(payment.getCreditor()).stripTrailingZeros().toPlainString());
    }

    public PaymentUISimple(Invoice invoice, int type) {
        this.invoice = invoice;
        this.type = type;
        initComponents();
        setup(true);
    }

    /**
     * Creates new form PaymentUISimple
     */
    public PaymentUISimple() {
        initComponents();
        setup(true);
    }

    private void setup(boolean addPayment) {
        inputFieldValue.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updatePaymentValue();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updatePaymentValue();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });

        switch (type) {
            case Payment.BANK_ACCOUNT:
                payment.setObjectType(Payment.BANK_ACCOUNT);
                comboListTargetObjects.setModel(getPosAccountModel());
                break;
            case Payment.CASH_BOX:
                payment.setObjectType(Payment.CASH_BOX);
                comboListTargetObjects.setModel(getCashBoxModel());
                break;
        }

        comboListTargetObjects.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                payment.setObjectId(((PaymentObject) comboListTargetObjects.getSelectedItem()).id);
            }
        });
        payment.setObjectId(((PaymentObject) comboListTargetObjects.getSelectedItem()).id);

        if (addPayment) {
            invoice.addPayment(payment);
        }
    }

    public final DefaultComboBoxModel getPosAccountModel() {
        DefaultComboBoxModel<PaymentObject> dcbm = new DefaultComboBoxModel<>();

        dcbm.addElement(new PaymentObject("پوز 1", 1));
        dcbm.addElement(new PaymentObject("پوز 2", 2));

        return dcbm;
    }

    public final DefaultComboBoxModel getCashBoxModel() {
        DefaultComboBoxModel<PaymentObject> dcbm = new DefaultComboBoxModel<>();
        dcbm.addElement(new PaymentObject("صندوق 1", 1));
        return dcbm;
    }

    public class PaymentObject {

        public String name;
        public long id;

        private PaymentObject(String name, int id) {
            this.name = name;
            this.id = id;
        }

        @Override
        public String toString() {
            return String.valueOf(name);
        }

    }

    private void updatePaymentValue() {
        try {
            if (Invoice.isExporting(invoice.getOperationType())) {
                payment.setCreditor(new BigDecimal(inputFieldValue.getText()));
                payment.setDeptor(BigDecimal.ZERO);
            } else {
                payment.setCreditor(BigDecimal.ZERO);
                payment.setDeptor(new BigDecimal(inputFieldValue.getText()));
            }
            inputFieldValue.setForeground(AppTheme.COLOR_TEXT_DEFAULT);
        } catch (Exception e) {
            payment.setCreditor(BigDecimal.ZERO);
            payment.setDeptor(BigDecimal.ZERO);
            inputFieldValue.setForeground(AppTheme.COLOR_WARNING);
        }
    }

    public Payment getPayment() {
        return payment;
    }

    public void setInvoice(Invoice invoice) {
        this.invoice = invoice;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputFieldValue = new ui.controls.input.InputFieldNumber();
        comboListTargetObjects = new ui.controls.ComboList();
        pressButton1 = new ui.controls.PressButton();

        setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        inputFieldValue.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "مبلغ", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        inputFieldValue.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        comboListTargetObjects.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "پرداخت به", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        comboListTargetObjects.setPreferredSize(new java.awt.Dimension(150, 18));

        pressButton1.setText("حذف");
        pressButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(comboListTargetObjects, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputFieldValue, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pressButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(comboListTargetObjects, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(inputFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(pressButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void pressButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pressButton1ActionPerformed
        Container parent = getParent();
        invoice.removePayment(payment);
        parent.remove(this);
        parent.revalidate();
        parent.repaint();
    }//GEN-LAST:event_pressButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ui.controls.ComboList comboListTargetObjects;
    private ui.controls.input.InputFieldNumber inputFieldValue;
    private ui.controls.PressButton pressButton1;
    // End of variables declaration//GEN-END:variables
}
