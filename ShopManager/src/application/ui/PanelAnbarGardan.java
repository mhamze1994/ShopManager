/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application.ui;

import application.DatabaseManager;
import application.printer.AnbarGardaniRawPrint;
import entity.AnbarGardaniEntity;
import entity.Item;
import invoice.ui.CustomeDefaultTableCellRenderer;
import invoice.ui.CustomeTableHeaderRenderer;
import java.awt.ComponentOrientation;
import java.awt.PrintJob;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import ui.controls.PressButton;

/**
 *
 * @author PersianDevStudio
 */
public class PanelAnbarGardan extends javax.swing.JPanel {

    private int currentColumn;
    private int currentRow;
    private AnbarGardanTableModel anbarGardanTableModel;

    /**
     * Creates new form PanelAnbarGardan
     */
    public PanelAnbarGardan() {
        initComponents();

        pressButtonSave.setTextHorizontalPosition(PressButton.POSITION_CENTER);
        pressButtonPrintRaw.setTextHorizontalPosition(PressButton.POSITION_CENTER);
        anbarGardanTableModel = new AnbarGardanTableModel();

        jTable1.setModel(anbarGardanTableModel);

        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.setRowHeight(25);

        jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(300);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(100);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(300);

        jTable1.getTableHeader().setDefaultRenderer(new CustomeTableHeaderRenderer());

        DefaultCellEditor singleclick = new DefaultCellEditor(new JTextField());
        singleclick.setClickCountToStart(1);
        TableColumnModel columnModel = jTable1.getColumnModel();
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            columnModel.getColumn(i).setCellEditor(singleclick);
            columnModel.getColumn(i).setCellRenderer(new CustomeDefaultTableCellRenderer());
        }

        jTable1.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            currentColumn = jTable1.getSelectedColumn();
            currentRow = jTable1.getSelectedRow();
            java.awt.EventQueue.invokeLater(() -> {
                jTable1.editCellAt(currentRow, currentColumn);

            });
        });

        jTable1.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        jScrollPane1.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        pressButtonSave = new ui.controls.PressButton();
        pressButtonPrintRaw = new ui.controls.PressButton();

        setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        pressButtonSave.setText("ذخیره");
        pressButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressButtonSaveActionPerformed(evt);
            }
        });
        jPanel1.add(pressButtonSave);

        pressButtonPrintRaw.setText("پرینت فرم خام");
        pressButtonPrintRaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressButtonPrintRawActionPerformed(evt);
            }
        });
        jPanel1.add(pressButtonPrintRaw);

        add(jPanel1, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void pressButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pressButtonSaveActionPerformed
        save();
    }//GEN-LAST:event_pressButtonSaveActionPerformed

    private void pressButtonPrintRawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pressButtonPrintRawActionPerformed
        printRawForm();
    }//GEN-LAST:event_pressButtonPrintRawActionPerformed

    public void printRawForm() {

        try {
            PrinterJob myPrtJob = PrinterJob.getPrinterJob();
            myPrtJob.setPageable(new AnbarGardaniRawPrint(anbarGardanTableModel.allItems, 30));
            myPrtJob.print();
        } catch (PrinterException ex) {
            Logger.getLogger(PanelAnbarGardan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void save() {

        if (jTable1.isEditing()) {
            jTable1.getCellEditor().stopCellEditing();
        }
        DatabaseManager.instance.BeginTransaction();
        for (AnbarGardaniEntity item : anbarGardanTableModel.allItems) {
            try {
                try (CallableStatement call = DatabaseManager.instance.prepareCall("call anbar_gardani_update(?,?,?,?)")) {
                    DatabaseManager.SetLong(call, 1, item.itemId);
                    DatabaseManager.SetBigDecimal(call, 2, item.count1);
                    DatabaseManager.SetBigDecimal(call, 3, item.count2);
                    DatabaseManager.SetBigDecimal(call, 4, item.count3);
                    call.execute();
                }
            } catch (SQLException ex) {
                DatabaseManager.instance.Rollback();
                Logger.getLogger(PanelAnbarGardan.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        DatabaseManager.instance.CommitTransaction();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private ui.controls.PressButton pressButtonPrintRaw;
    private ui.controls.PressButton pressButtonSave;
    // End of variables declaration//GEN-END:variables

    private static class AnbarGardanTableModel extends DefaultTableModel {

        private String[] columns = {"ردیف", "کد کالا", "شرح کالا", "شمارش اول", "شمارش دوم", "شمارش سوم", ""};

        private ArrayList<AnbarGardaniEntity> allItems = new ArrayList<>();

        public AnbarGardanTableModel() {
            allItems = Item.loadAnbarGardani();

        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 3 || column == 4 || column == 5;
        }

        @Override
        public Object getValueAt(int row, int column) {
            switch (column) {
                case 0:
                    return row + 1;
                case 1:
                    return allItems.get(row).itemId;
                case 2:
                    return allItems.get(row).desc;
                case 3:
                    BigDecimal count1 = allItems.get(row).count1;
                    return count1.stripTrailingZeros().equals(BigDecimal.ZERO) ? "" : count1.stripTrailingZeros().toPlainString();
                case 4:
                    BigDecimal count2 = allItems.get(row).count2;
                    return count2.stripTrailingZeros().equals(BigDecimal.ZERO) ? "" : count2.stripTrailingZeros().toPlainString();
                case 5:
                    BigDecimal count3 = allItems.get(row).count3;
                    return count3.stripTrailingZeros().equals(BigDecimal.ZERO) ? "" : count3.stripTrailingZeros().toPlainString();
            }
            return ""; //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void setValueAt(Object aValue, int row, int column) {

            AnbarGardaniEntity entity = allItems.get(row);
            BigDecimal bigDecimal = null;
            if (aValue.toString().trim().isEmpty()) {
                bigDecimal = new BigDecimal("0");
            } else {
                try {
                    bigDecimal = new BigDecimal(aValue + "");
                } catch (Exception e) {

                }
            }

            switch (column) {
                case 3:
                    entity.count1 = bigDecimal == null ? entity.count1 : bigDecimal;
                    break;
                case 4:
                    entity.count2 = bigDecimal == null ? entity.count2 : bigDecimal;
                    break;
                case 5:
                    entity.count3 = bigDecimal == null ? entity.count3 : bigDecimal;
                    break;
                default:
                    break;
            }

        }

        @Override
        public String getColumnName(int column) {

            return columns[column];
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public int getRowCount() {
            if (allItems == null) {
                return 0;
            }
            return allItems.size();
        }

    }
}
